{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Quickstart","text":"<p>Django's application for handling privacy and cookie policies configured with Iubenda.</p>"},{"location":"#requirements","title":"Requirements","text":"<p>These packages are required:</p> <ul> <li>Python +3.8 supported.</li> <li>Django +3.2 supported.</li> </ul> <p>We highly recommend and only officially support the latest patch release of each Python and Django series.</p>"},{"location":"#installation","title":"Installation","text":"<ol> <li> <p>Install from pip: <pre><code>pip install django-iubenda\n</code></pre></p> </li> <li> <p>Modify <code>settings.py</code> by adding the app to <code>INSTALLED_APPS</code>: <pre><code>INSTALLED_APPS = (\n    \"modeltranslation\",\n    # ...\n    \"iubenda\",\n    # ...\n)\n</code></pre></p> </li> <li> <p>Modify <code>settings.py</code> by adding the app's context processor to <code>TEMPLATES</code>: <pre><code>TEMPLATES = [\n    {\n        # ...\n        \"OPTIONS\": {\n            \"context_processors\": [\n                # ...\n                \"iubenda.context_processors.iubenda\",\n                # ...\n            ],\n        },\n    },\n]\n</code></pre></p> </li> <li> <p>Be sure the Django's Locale middleware is enabled inside <code>settings.py</code>: <pre><code>MIDDLEWARE = (\n    # ...\n    \"django.middleware.locale.LocaleMiddleware\",\n    # ...\n)\n</code></pre></p> </li> <li> <p>Modify <code>url.py</code> by adding the app's urls to <code>urlpatterns</code>: <pre><code>urlpatterns += [\n    path(\"\", include(\"iubenda.urls\")),\n]\n</code></pre></p> </li> <li> <p>Modify <code>url.py</code> by adding the app's sitemaps to <code>sitemaps</code>: <pre><code>from iubenda.sitemaps import PrivacySitemap, CookieSitemap\n\nsitemaps = {\n    # ...\n    \"privacy\": PrivacySitemap,\n    \"cookie\": CookieSitemap,\n    # ...\n}\n</code></pre></p> </li> <li> <p>Be sure the variable <code>LANGUAGE_CODE</code> is available for HTML templates: <pre><code>{% load i18n %}\n{% get_current_language as LANGUAGE_CODE %}\n</code></pre></p> </li> <li> <p>Modify your project's template to add privacy and cookie policies.    For example inside the <code>footer.html</code> add following code: <pre><code>{% if not debug %}\n    {% block iubenda %}{% include \"iubenda/include-content.html\" %}{% endblock iubenda %}\n{% endif %}\n</code></pre></p> </li> </ol>"},{"location":"#optional","title":"Optional","text":""},{"location":"#content-security-policy","title":"Content Security Policy","text":"<p>If Content Security Policy are implemented in your server and inline scripts are disabled, the variable <code>IUBENDA_CSP_NONCE</code> can be set with nonce tag will be inserted script's nonce. <pre><code>&lt;script type=\"text/javascript\" {% if cx_iubenda_nonce %}nonce=\"{{ cx_iubenda_nonce }}\"{% endif %}&gt;\n</code></pre> Inside your webserver's configurations, a rule to dynamically replace your CONSTANT nonce in a random string is needed.</p> <p>To allow  external source from Iubenda domains, please implement these rules: <pre><code>Content-Security-Policy:\n    script-src-elem https://*.iubenda.com\";\n    img-src https://*.iubenda.com data:\";\n    style-src https://*.iubenda.com\";\n    connect-src https://*.iubenda.com\";\n    frame-src https://*.iubenda.com\";\n</code></pre></p> <p>If you prefer to not allow unsafe-inline inside your CSP, please also add the two specific hash for your script prompted as error in Javascript Console. <pre><code># Iubenda Privacy And Cookie Policy - API\nContent-Security-Policy:\n    ...\n    script-src-elem https://*.iubenda.com 'sha256-YOUR-FIRST-HASH-PROMPTED-INSIDE-CONSOLE' 'sha256-YOUR-SECOND-HASH-PROMPTED-INSIDE-CONSOLE';\n    ...\n</code></pre></p> <p>Check this article from Iubenda help</p>"},{"location":"#iubendas-options","title":"Iubenda's Options","text":"<p>To personalize the Iubenda script's behaviour, the dict <code>IUBENDA_OPTIONS</code> can be configured inside <code>settings.py</code> <pre><code>IUBENDA_OPTIONS = {\n    \"ccpaAcknowledgeOnDisplay\": \"true\",\n    \"ccpaApplies\": \"true\",\n    \"consentOnContinuedBrowsing\": \"false\",\n    \"enableCcpa\": \"true\",\n    \"floatingPreferencesButtonDisplay\": \"bottom-left\",\n    \"invalidateConsentWithoutLog\": \"true\",\n    \"perPurposeConsent\": \"true\",\n    \"whitelabel\": \"false\",\n    \"banner\": {\n        \"acceptButtonDisplay\": \"true\",\n        \"backgroundOverlay\": \"true\",\n        \"closeButtonRejects\": \"true\",\n        \"customizeButtonDisplay\": \"true\",\n        \"explicitWithdrawal\": \"true\",\n        \"fontSize\": \"14px\",\n        \"listPurposes\": \"true\",\n        \"position\": \"float-center\",\n        \"rejectButtonDisplay\": \"true\",\n    },\n}\n</code></pre></p>"},{"location":"#integration-with-google-tag-manager","title":"Integration with Google Tag Manager","text":"<p>If Google Tag Manager is implemented in your application and all needed settings were configured inside the container, the variable <code>IUBENDA_GTM</code> can be set with the value <code>True</code> and the Iubenda's callback will be inserted inside the script.</p> <p>For needed configuration inside Google Tag Manager container, please refer to these notes: * Google Consent Mode * Google Consent Mode setup GTM with Iubenda * GTM Blocking Cookies</p>"},{"location":"#example","title":"Example","text":"<p>Let's take a look at a quick example of using this project to build a simple App with custom error pages.</p> <ul> <li>Check the demo repo on GitHub</li> </ul>"},{"location":"#quickstart","title":"Quickstart","text":"<p>Can't wait to get started? The quickstart guide is the fastest way to get up and running and building a demo App.</p>"},{"location":"#customize","title":"Customize","text":"<p>Do you want custom solutions? The [customize][customize] section is an overview of which part are easy to design. If you find how to personalize different scenarios or behaviors, a pull request is welcome!</p>"},{"location":"#development","title":"Development","text":"<p>See the Contribution guidelines for information on how to clone  the repository, run the test suite and contribute changes back to django-iubenda.</p>"},{"location":"#security","title":"Security","text":"<p>If you believe you\u2019ve found something in this project which has security implications, please do not raise the issue in a public forum.</p> <p>Send a description of the issue via email to dlrsp.issue@gmail.com.  The project maintainers will then work with you to resolve any issues where required, prior to any public disclosure.</p>"},{"location":"#license","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2010-present DLRSP (https://dlrsp.org) and other contributors.</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"community/contributing/","title":"Contributing","text":"<p>The world can only really be changed one piece at a time.  The art is picking that piece.</p> <p>\u2014 Tim Berners-Lee</p>"},{"location":"community/contributing/#community","title":"Community","text":"<p>The most important thing you can do to help push the project forward is to be actively involved wherever possible.  Code contributions are often overvalued as being the primary way to get involved in a project, we don't believe that needs to be the case.</p> <p>If you use this app, we'd love you to be vocal about your experiences with it - you might consider writing a blog post about, or publishing a tutorial about building a project with it.  Experiences from beginners can be particularly helpful because you'll be in the best position to assess which bits of application are more difficult to understand and work with.</p> <p>When answering questions make sure to help future contributors find their way around by hyperlinking wherever possible to related threads and tickets, and include backlinks from those items if relevant.</p>"},{"location":"community/contributing/#code-of-conduct","title":"Code of conduct","text":"<p>Please keep the tone polite &amp; professional.  For some users a discussion on the mailing list or ticket tracker may be their first engagement with the open source community.  First impressions count, so let's try to make everyone feel welcome.</p> <p>Be mindful in the language you choose.  As an example, in an environment that is heavily male-dominated, posts that start 'Hey guys,' can come across as unintentionally exclusive.  It's just as easy, and more inclusive to use gender neutral language in those situations.</p> <p>The Django code of conduct gives a fuller set of guidelines for participating in community forums.</p>"},{"location":"community/contributing/#issues","title":"Issues","text":"<p>It's really helpful if you can make sure to address issues on the correct channel.  Usage questions should be directed to the discussion group.  Feature requests, bug reports and other issues should be raised on the GitHub issue tracker.</p> <p>Some tips on good issue reporting:</p> <ul> <li>When describing issues try to phrase your ticket in terms of the behavior you think needs changing rather than the code you think need changing.</li> <li>Search the issue list first for related items, and make sure you're running the latest version before reporting an issue.</li> <li>If reporting a bug, then try to include a pull request with a failing test case.  This will help us quickly identify if there is a valid issue, and make sure that it gets fixed more quickly if there is one.</li> <li>Feature requests will often be closed with a recommendation that they be implemented outside of the core library.  Keeping new feature requests implemented as third party libraries allows us to keep down the maintenance overhead, so that the focus can be on continued stability, bugfixes, and great documentation.</li> <li>Closing an issue doesn't necessarily mean the end of a discussion.  If you believe your issue has been closed incorrectly, explain why and we'll consider if it needs to be reopened.</li> </ul>"},{"location":"community/contributing/#triaging-issues","title":"Triaging issues","text":"<p>Getting involved in triaging incoming issues is a good way to start contributing.  Every single ticket that comes into the ticket tracker needs to be reviewed in order to determine what the next steps should be.  Anyone can help out with this, you just need to be willing to</p> <ul> <li>Read through the ticket - does it make sense, is it missing any context that would help explain it better?</li> <li>Is the ticket reported in the correct place, would it be better suited as a discussion on the discussion group?</li> <li>If the ticket is a bug report, can you reproduce it? Are you able to write a failing test case that demonstrates the issue and that can be submitted as a pull request?</li> <li>If the ticket is a feature request, do you agree with it, and could the feature request instead be implemented as a third party package?</li> <li>If a ticket hasn't had much activity and it addresses something you need, then comment on the ticket and try to find out what's needed to get it moving again.</li> </ul>"},{"location":"community/contributing/#development","title":"Development","text":"<p>To start developing, first create a Fork from the django-iubenda repo on GitHub.</p> <p>Then clone your fork. The clone command will look like this, with your GitHub username instead of YOUR-USERNAME:</p> <pre><code>git clone https://github.com/YOUR-USERNAME/django-iubenda\n</code></pre> <p>See GitHub's Fork a Repo Guide for more help.</p> <p>Changes should broadly follow the PEP 8 style conventions, and we recommend you set up your editor to automatically indicate non-conforming styles. You can check your contributions against these conventions each time you commit using the pre-commit hooks, which we also run on CI. To set them up, first ensure you have the pre-commit tool installed, for example:</p> <pre><code>python -m pip install pre-commit\n</code></pre> <p>Then run:</p> <pre><code>pre-commit install\n</code></pre>"},{"location":"community/contributing/#translation","title":"Translation","text":"<p>To run the translation, clone the repository, go inside the package directory, and then:</p> <pre><code>cd src/django_errors\ndjango-admin makemessages -l it\ndjango-admin makemessages -d djangojs -l it\n</code></pre> <p>Modify the .po file for your locale, and then:</p> <pre><code>django-admin compilemessages -l it\n</code></pre> <p>Contribute with your translation, test it in your local example and then push the commit as \"Pull request\"</p>"},{"location":"community/contributing/#testing","title":"Testing","text":"<p>To run the tests, clone the repository, and then:</p> <pre><code># Setup the virtual environment\npython -m venv env\nsource env/bin/activate\npip install django\npip install -r requirements/requirements.in\n\n# Run the tests\npython runtests.py\n</code></pre>"},{"location":"community/contributing/#test-options","title":"Test options","text":"<p>Run using a more concise output style.</p> <pre><code>python runtests.py -q\n</code></pre> <p>Run the tests for a given test case.</p> <pre><code>python runtests.py MyTestCase\n</code></pre> <p>Run the tests for a given test method.</p> <pre><code>python runtests.py MyTestCase.test_this_method\n</code></pre> <p>Shorter form to run the tests for a given test method.</p> <pre><code>python runtests.py test_this_method\n</code></pre> <p>Note: The test case and test method matching is fuzzy and will sometimes run other tests that contain a partial string match to the given  command line input.</p>"},{"location":"community/contributing/#running-against-multiple-environments","title":"Running against multiple environments","text":"<p>You can also use the excellent tox testing tool to run the tests against all supported versions of Python and Django.  Install <code>tox</code> globally, and then simply run:</p> <pre><code>tox\n</code></pre>"},{"location":"community/contributing/#pull-requests","title":"Pull requests","text":"<p>It's a good idea to make pull requests early on.  A pull request represents the start of a discussion, and doesn't necessarily need to be the final, finished submission.</p> <p>It's also always best to make a new branch before starting work on a pull request.  This means that you'll be able to later switch back to working on another separate issue without interfering with an ongoing pull requests.</p> <p>It's also useful to remember that if you have an outstanding pull request then pushing new commits to your GitHub repo will also automatically update the pull requests.</p> <p>GitHub's documentation for working on pull requests is available here.</p> <p>Always run the tests before submitting pull requests, and ideally run <code>tox</code> in order to check that your modifications are compatible on all supported versions of Python and Django.</p> <p>Once you've made a pull request take a look at the build status in the GitHub interface and make sure the tests are running as you'd expect.</p> <p></p> <p>Above: build notifications</p>"},{"location":"community/contributing/#managing-compatibility-issues","title":"Managing compatibility issues","text":"<p>Sometimes, in order to ensure your code works on various different versions of Django, Python or third party libraries, you'll need to run slightly different code depending on the environment.  Any code that branches in this way should be isolated into the <code>compat.py</code> module, and should provide a single common interface that the rest of the codebase can use.</p>"},{"location":"community/contributing/#documentation","title":"Documentation","text":"<p>The documentation is built from the Markdown source files in the docs directory.</p> <p>There are many great Markdown editors that make working with the documentation really easy.  The Mou editor for Mac is one such editor that comes highly recommended.</p>"},{"location":"community/contributing/#building-the-documentation","title":"Building the documentation","text":"<p>To build the documentation, install MkDocs with <code>pip install mkdocs</code> and then run the following command.</p> <pre><code>mkdocs build\n</code></pre> <p>This will build the documentation into the <code>site</code> directory.</p> <p>You can build the documentation and open a preview in a browser window by using the <code>serve</code> command.</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"community/contributing/#language-style","title":"Language style","text":"<p>Documentation should be in English.  The tone of the documentation is very important - try to stick to a simple, plain, objective and well-balanced style where possible.</p> <p>Some other tips:</p> <ul> <li>Keep paragraphs reasonably short.</li> <li>Don't use abbreviations such as 'e.g.' but instead use the long form, such as 'For example'.</li> </ul>"},{"location":"community/contributing/#markdown-style","title":"Markdown style","text":"<p>There are a couple of conventions you should follow when working on the documentation.</p>"},{"location":"community/contributing/#1-headers","title":"1. Headers","text":"<p>Headers should use the hash style.  For example:</p> <pre><code>### Some important topic\n</code></pre> <p>The underline style should not be used.  Don't do this:</p> <pre><code>Some important topic\n====================\n</code></pre>"},{"location":"community/contributing/#2-links","title":"2. Links","text":"<p>Links should always use the reference style, with the referenced hyperlinks kept at the end of the document.</p> <pre><code>Here is a link to [some other thing][other-thing].\n\nMore text...\n\n[other-thing]: http://example.com/other/thing\n</code></pre> <p>This style helps keep the documentation source consistent and readable.</p> <p>If you are hyperlinking to another document, you should use a relative link, and link to the <code>.md</code> suffix.  For example:</p> <pre><code>[authentication]: ../api-guide/authentication.md\n</code></pre> <p>Linking in this style means you'll be able to click the hyperlink in your Markdown editor to open the referenced document.  When the documentation is built, these links will be converted into regular links to HTML pages.</p>"},{"location":"community/contributing/#3-notes","title":"3. Notes","text":"<p>If you want to draw attention to a note or warning, use a pair of enclosing lines, like so:</p> <pre><code>---\n\n**Note:** A useful documentation note.\n\n---\n</code></pre>"},{"location":"community/references/","title":"References","text":""},{"location":"community/references/#errors-topic","title":"Errors Topic","text":"<p>the-secret-of-a-successful-error-page applying-defensive-design-for-the-web why-django-doesnt-have-error-page-handler-for-405 everything-you-need-to-know-about-middleware comprehensive-guide-to-django-middleware</p>"},{"location":"community/references/#errors-example","title":"Errors example","text":""},{"location":"community/references/#404","title":"404","text":"<p>py4u.net</p>"},{"location":"community/status_code/","title":"Status Codes","text":""},{"location":"community/status_code/#100s-informational-responses","title":"100's - Informational Responses","text":""},{"location":"community/status_code/#100-continue","title":"100 Continue","text":"<p>An interim response and client should continue with request</p>"},{"location":"community/status_code/#101-switching-protocols","title":"101 Switching Protocols","text":"<p>Indicates to client / browser the server is switching protocols</p>"},{"location":"community/status_code/#102-processing","title":"102 Processing","text":"<p>Server is processing the request</p>"},{"location":"community/status_code/#103-checkpoint","title":"103 Checkpoint","text":"<p>Resume aborted PUT or GET requests</p>"},{"location":"community/status_code/#122-request-uri-too-long","title":"122 Request - URI Too Long","text":"<p>The URI is too long and exceeds the maximum 2083 characters</p>"},{"location":"community/status_code/#200s-successful-responses","title":"200's - Successful Responses","text":""},{"location":"community/status_code/#200-ok","title":"200 OK","text":"<p>Server successfully processed request</p>"},{"location":"community/status_code/#201-created","title":"201 Created","text":"<p>Request was successful and server created new resource</p>"},{"location":"community/status_code/#202-accepted","title":"202 Accepted","text":"<p>Request accepted but not processed yet</p>"},{"location":"community/status_code/#203-non-authoritative-information","title":"203 Non-Authoritative Information","text":"<p>Request processed successfully but information returned may be from another source</p>"},{"location":"community/status_code/#204-no-content","title":"204 No Content","text":"<p>Request completed but no content was returned</p>"},{"location":"community/status_code/#205-reset-content","title":"205 Reset Content","text":"<p>Request completed but no content was returned; requires requestor reset document view</p>"},{"location":"community/status_code/#206-partial-content","title":"206 Partial Content","text":"<p>Server delivered a partial GET request</p>"},{"location":"community/status_code/#207-multiple-status","title":"207 Multiple Status","text":"<p>Successful response for WebDAV</p>"},{"location":"community/status_code/#208-already-reported","title":"208 Already Reported","text":"<p>Results previously returned and not inlcuded again</p>"},{"location":"community/status_code/#210-content-different","title":"210 Content Different","text":"<p>Content and/or property mismatch between client and server</p>"},{"location":"community/status_code/#226-im-used","title":"226 IM Used","text":"<p>Server has fulfilled the request and response is an instance manipulated result</p>"},{"location":"community/status_code/#300s-redirection-responses","title":"300's - Redirection Responses","text":""},{"location":"community/status_code/#300-multiple-choices","title":"300 Multiple Choices","text":"<p>Server has multiple actions available based on the request; user can select from list</p>"},{"location":"community/status_code/#301-moved-permanently","title":"301 Moved Permanently","text":"<p>Requested page has been permanently moved to a different URL</p>"},{"location":"community/status_code/#302-moved-temporarily-found","title":"302 Moved Temporarily / Found","text":"<p>Requested page has been temporarily moved to a different URL; requestor should continue to use original URL</p>"},{"location":"community/status_code/#303-see-other","title":"303 See Other","text":"<p>The requested page can be located at a different URL; user is not automatically forwarded</p>"},{"location":"community/status_code/#304-not-modified","title":"304 Not Modified","text":"<p>Page has not been modified sonce last request</p>"},{"location":"community/status_code/#305-use-proxy","title":"305 Use Proxy","text":"<p>Requestor must use a proxy to access the requested page</p>"},{"location":"community/status_code/#306-switch-proxy","title":"306 Switch Proxy","text":"<p>No longer used</p>"},{"location":"community/status_code/#307-temporary-redirect","title":"307 Temporary Redirect","text":"<p>Requested page has been temporarily moved to a different URL; requestor should continue to use original URL</p>"},{"location":"community/status_code/#308-resume-incomplete","title":"308 Resume Incomplete","text":"<p>Used in resumable requests proposal to resume aborted POST and PUT requests</p>"},{"location":"community/status_code/#400s-client-error-responses","title":"400's - Client Error Responses","text":""},{"location":"community/status_code/#400-bad-request","title":"400 Bad Request","text":"<p>Request cannot be fulfilled due to incorrect syntax</p>"},{"location":"community/status_code/#401-unauthorized","title":"401 Unauthorized","text":"<p>Authentication is required or has not been provided</p>"},{"location":"community/status_code/#402-payment-required","title":"402 Payment Required","text":"<p>Not currently used. Intended for use in digital cash transactions</p>"},{"location":"community/status_code/#403-forbidden","title":"403 Forbidden","text":"<p>Client does not have suffcient permissions to access the requested resource</p>"},{"location":"community/status_code/#404-not-found","title":"404 Not Found","text":"<p>Requested page cannot be found at current location but could be available in the future</p>"},{"location":"community/status_code/#405-method-not-allowed","title":"405 Method Not Allowed","text":"<p>Request was made using a method not supported by page</p>"},{"location":"community/status_code/#406-not-acceptable","title":"406 Not Acceptable","text":"<p>Server can provide only content that is unacceptable to the client</p>"},{"location":"community/status_code/#407-proxy-authentication-required","title":"407 Proxy Authentication Required","text":"<p>Client must authenticate with a proxy to access resource</p>"},{"location":"community/status_code/#408-request-timeout","title":"408 Request Timeout","text":"<p>Server timed out waiting for request from client</p>"},{"location":"community/status_code/#409-conflict","title":"409 Conflict","text":"<p>Request could not be processed due to a conflict</p>"},{"location":"community/status_code/#410-gone","title":"410 Gone","text":"<p>The requested page is no longer available and will not be available again</p>"},{"location":"community/status_code/#411-length-required","title":"411 Length Required","text":"<p>Server has denied request due to unspecified length of content</p>"},{"location":"community/status_code/#412-precondition-failed","title":"412 Precondition Failed","text":"<p>Resource does not meet conditions of client's request</p>"},{"location":"community/status_code/#413-request-entity-too-large","title":"413 Request Entity Too Large","text":"<p>Request is too large to fulfill</p>"},{"location":"community/status_code/#414-request-uri-too-long","title":"414 Request URI Too Long","text":"<p>Requested URL is too long for the server to process</p>"},{"location":"community/status_code/#415-unsupported-media-type","title":"415 Unsupported Media Type","text":"<p>Server does not media type requested</p>"},{"location":"community/status_code/#416-requested-range-not-satisfiable","title":"416 Requested Range Not Satisfiable","text":"<p>Client requested portion of file but server cannot satisfy the request</p>"},{"location":"community/status_code/#417-expectation-failed","title":"417 Expectation Failed","text":"<p>Server cannot meet requirements of Expect request header field</p>"},{"location":"community/status_code/#418-im-a-teapot","title":"418 I'm A Teapot","text":"<p>An IETF April Fools' joke</p>"},{"location":"community/status_code/#420-enhance-your-calm","title":"420 Enhance Your Calm","text":"<p>Client rate limiting by Twitter</p>"},{"location":"community/status_code/#422-unprocessable-entity","title":"422 Unprocessable Entity","text":"<p>Unable to process request due to semantic errors</p>"},{"location":"community/status_code/#423-locked","title":"423 Locked","text":"<p>Requested resource is locked</p>"},{"location":"community/status_code/#424-method-failure","title":"424 Method Failure","text":"<p>Request failed due to failure of a previous request (e.g. a PROPPATCH)</p>"},{"location":"community/status_code/#426-upgrade-required","title":"426 Upgrade Required","text":"<p>Client should switch to a different protocol</p>"},{"location":"community/status_code/#428-precondition-required","title":"428 Precondition Required","text":"<p>Server requires request to be conditional to prevent conflicts</p>"},{"location":"community/status_code/#429-too-many-requests","title":"429 Too Many Requests","text":"<p>User has sent too many requests in a specified time period</p>"},{"location":"community/status_code/#431-request-header-fields-too-large","title":"431 Request Header Fields Too Large","text":"<p>Request cannot be processed due to individual field or collective fields are too large</p>"},{"location":"community/status_code/#444-no-response","title":"444 No Response","text":"<p>Indicates Nginx server has not returned requested information and has closed connection</p>"},{"location":"community/status_code/#449-retry-with","title":"449 Retry With","text":"<p>Request should be performed after the specified action</p>"},{"location":"community/status_code/#450-blocked-by-windows-parental-controls","title":"450 Blocked By Windows Parental Controls","text":"<p>Page blocked by Windows Parental Controls</p>"},{"location":"community/status_code/#451-redirect","title":"451 Redirect","text":"<p>Either more efficient server available or server can't access user's mailbox</p>"},{"location":"community/status_code/#499-client-closed-request","title":"499 Client Closed Request","text":"<p>Indicates client has closed connection prior to server completing request</p>"},{"location":"community/status_code/#500s-server-error-responses","title":"500's - Server Error Responses","text":""},{"location":"community/status_code/#500-internal-server-error","title":"500 Internal Server Error","text":"<p>Server encountered an unexpected condition that prevented request fulfillment.</p>"},{"location":"community/status_code/#501-not-implemented","title":"501 Not Implemented","text":"<p>Request is unrecognizable or server lacks ability to fulfill it</p>"},{"location":"community/status_code/#502-bad-gateway","title":"502 Bad Gateway","text":"<p>Server received an invalid response from an upstream server and could not fulfill request</p>"},{"location":"community/status_code/#503-service-unavailable","title":"503 Service Unavailable","text":"<p>Server is currently unavailable</p>"},{"location":"community/status_code/#504-gateway-timeout","title":"504 Gateway Timeout","text":"<p>Server did not receive a timely response from upstream server</p>"},{"location":"community/status_code/#505-http-version-not-supported","title":"505 HTTP Version Not Supported","text":"<p>Server does not support the HTTP protocol used in request</p>"},{"location":"community/status_code/#506-variant-also-negotiates","title":"506 Variant Also Negotiates","text":"<p>Content negotiation results in circular reference</p>"},{"location":"community/status_code/#507-insufficient-storage","title":"507 Insufficient Storage","text":"<p>Insufficient storage</p>"},{"location":"community/status_code/#508-loop-detected","title":"508 Loop Detected","text":"<p>Server detected an infinite loop while processing request</p>"},{"location":"community/status_code/#509-bandwidth-limit-exceeded","title":"509 Bandwidth Limit Exceeded","text":"<p>Apache extension not defined in RFC's to communicate bandwidth allocation exceeded</p>"},{"location":"community/status_code/#510-not-extended","title":"510 Not Extended","text":"<p>Further extensions to the request are required to fulfill it</p>"},{"location":"community/status_code/#511-network-authentication-required","title":"511 Network Authentication Required","text":"<p>Client is required to authenticate to gain network access</p>"},{"location":"community/status_code/#598-network-read-timeout-error","title":"598 Network Read Timeout Error","text":"<p>Client behind proxy experiences network read timeout error</p>"},{"location":"community/status_code/#599-network-connect-timeout-error","title":"599 Network Connect Timeout Error","text":"<p>Client behind proxy experiences network connect timeout error</p>"},{"location":"community/third-party-packages/","title":"Third Party Packages","text":"<p>Software ecosystems [\u2026] establish a community that further accelerates the sharing of knowledge, content, issues, expertise and skills.</p> <p>\u2014 Jan Bosch.</p>"},{"location":"community/third-party-packages/#about-third-party-packages","title":"About Third Party Packages","text":"<p>Third Party Packages allow developers to share code that extends the functionality of Django REST framework, in order to support additional use-cases.</p> <p>We support, encourage and strongly favor the creation of Third Party Packages to encapsulate new behavior rather than adding additional functionality directly to Django REST Framework.</p> <p>We aim to make creating third party packages as easy as possible, whilst keeping a simple and well maintained core API. By promoting third party packages we ensure that the responsibility for a package remains with its author. If a package proves suitably popular it can always be considered for inclusion into the core REST framework.</p> <p>If you have an idea for a new feature please consider how it may be packaged as a Third Party Package. We're always happy to discuss ideas on the Mailing List.</p>"},{"location":"community/third-party-packages/#creating-a-third-party-package","title":"Creating a Third Party Package","text":""},{"location":"community/third-party-packages/#version-compatibility","title":"Version compatibility","text":"<p>Sometimes, in order to ensure your code works on various different versions of Django, Python or third party libraries, you'll need to run slightly different code depending on the environment. Any code that branches in this way should be isolated into a <code>compat.py</code> module, and should provide a single common interface that the rest of the codebase can use.</p> <p>Check out Django REST framework's compat.py for an example.</p>"},{"location":"community/third-party-packages/#once-your-package-is-available","title":"Once your package is available","text":"<p>Once your package is decently documented and available on PyPI, you might want share it with others that might find it useful.</p>"},{"location":"community/third-party-packages/#adding-to-the-django-rest-framework-grid","title":"Adding to the Django REST framework grid","text":"<p>We suggest adding your package to the REST Framework grid on Django Packages.</p>"},{"location":"community/third-party-packages/#adding-to-the-django-rest-framework-docs","title":"Adding to the Django REST framework docs","text":"<p>Create a Pull Request or Issue on GitHub, and we'll add a link to it from the main REST framework documentation. You can add your package under Third party packages of the API Guide section that best applies, like Authentication or Permissions. You can also link your package under the Third Party Packages section.</p>"},{"location":"community/third-party-packages/#announce-on-the-discussion-group","title":"Announce on the discussion group.","text":"<p>You can also let others know about your package through the discussion group.</p>"},{"location":"community/third-party-packages/#existing-third-party-packages","title":"Existing Third Party Packages","text":"<p>Django REST Framework has a growing community of developers, packages, and resources.</p> <p>Check out a grid detailing all the packages and ecosystem around Django REST Framework at Django Packages.</p> <p>To submit new content, open an issue or create a pull request.</p>"},{"location":"community/third-party-packages/#authentication","title":"Authentication","text":"<ul> <li>djangorestframework-digestauth - Provides Digest Access Authentication support.</li> <li>django-oauth-toolkit - Provides OAuth 2.0 support.</li> <li>djangorestframework-simplejwt - Provides JSON Web Token Authentication support.</li> <li>hawkrest - Provides Hawk HTTP Authorization.</li> <li>djangorestframework-httpsignature - Provides an easy to use HTTP Signature Authentication mechanism.</li> <li>djoser - Provides a set of views to handle basic actions such as registration, login, logout, password reset and account activation.</li> <li>dj-rest-auth - Provides a set of REST API endpoints for registration, authentication (including social media authentication), password reset, retrieve and update user details, etc.</li> <li>drf-oidc-auth - Implements OpenID Connect token authentication for DRF.</li> <li>drfpasswordless - Adds (Medium, Square Cash inspired) passwordless logins and signups via email and mobile numbers.</li> <li>django-rest-authemail - Provides a RESTful API for user signup and authentication using email addresses.</li> </ul>"},{"location":"community/third-party-packages/#permissions","title":"Permissions","text":"<ul> <li>drf-any-permissions - Provides alternative permission handling.</li> <li>djangorestframework-composed-permissions - Provides a simple way to define complex permissions.</li> <li>rest_condition - Another extension for building complex permissions in a simple and convenient way.</li> <li>dry-rest-permissions - Provides a simple way to define permissions for individual api actions.</li> <li>drf-access-policy - Declarative and flexible permissions inspired by AWS' IAM policies.</li> <li>drf-psq - An extension that gives support for having action-based permission_classes, serializer_class, and queryset dependent on permission-based rules.</li> </ul>"},{"location":"community/third-party-packages/#serializers","title":"Serializers","text":"<ul> <li>django-rest-framework-mongoengine - Serializer class that supports using MongoDB as the storage layer for Django REST framework.</li> <li>djangorestframework-gis - Geographic add-ons</li> <li>djangorestframework-hstore - Serializer class to support django-hstore DictionaryField model field and its schema-mode feature.</li> <li>djangorestframework-jsonapi - Provides a parser, renderer, serializers, and other tools to help build an API that is compliant with the jsonapi.org spec.</li> <li>html-json-forms - Provides an algorithm and serializer to process HTML JSON Form submissions per the (inactive) spec.</li> <li>django-rest-framework-serializer-extensions -   Enables black/whitelisting fields, and conditionally expanding child serializers on a per-view/request basis.</li> <li>djangorestframework-queryfields - Serializer mixin allowing clients to control which fields will be sent in the API response.</li> <li>drf-flex-fields - Serializer providing dynamic field expansion and sparse field sets via URL parameters.</li> <li>drf-action-serializer - Serializer providing per-action fields config for use with ViewSets to prevent having to write multiple serializers.</li> <li>djangorestframework-dataclasses - Serializer providing automatic field generation for Python dataclasses, like the built-in ModelSerializer does for models.</li> <li>django-restql - Turn your REST API into a GraphQL like API(It allows clients to control which fields will be sent in a response, uses GraphQL like syntax, supports read and write on both flat and nested fields).</li> <li>graphwrap - Transform your REST API into a fully compliant GraphQL API with just two lines of code. Leverages Graphene-Django to dynamically build, at runtime, a GraphQL ObjectType for each view in your API.</li> </ul>"},{"location":"community/third-party-packages/#serializer-fields","title":"Serializer fields","text":"<ul> <li>drf-compound-fields - Provides \"compound\" serializer fields, such as lists of simple values.</li> <li>drf-extra-fields - Provides extra serializer fields.</li> <li>django-versatileimagefield - Provides a drop-in replacement for Django's stock <code>ImageField</code> that makes it easy to serve images in multiple sizes/renditions from a single field. For DRF-specific implementation docs, click here.</li> </ul>"},{"location":"community/third-party-packages/#views","title":"Views","text":"<ul> <li>django-rest-multiple-models - Provides a generic view (and mixin) for sending multiple serialized models and/or querysets via a single API request.</li> <li>drf-typed-views - Use Python type annotations to validate/deserialize request parameters. Inspired by API Star, Hug and FastAPI.</li> <li>rest-framework-actions - Provides control over each action in ViewSets. Serializers per action, method.</li> </ul>"},{"location":"community/third-party-packages/#routers","title":"Routers","text":"<ul> <li>drf-nested-routers - Provides routers and relationship fields for working with nested resources.</li> <li>wq.db.rest - Provides an admin-style model registration API with reasonable default URLs and viewsets.</li> </ul>"},{"location":"community/third-party-packages/#parsers","title":"Parsers","text":"<ul> <li>djangorestframework-msgpack - Provides MessagePack renderer and parser support.</li> <li>djangorestframework-jsonapi - Provides a parser, renderer, serializers, and other tools to help build an API that is compliant with the jsonapi.org spec.</li> <li>djangorestframework-camel-case - Provides camel case JSON renderers and parsers.</li> <li>nested-multipart-parser - Provides nested parser for http multipart request</li> </ul>"},{"location":"community/third-party-packages/#renderers","title":"Renderers","text":"<ul> <li>djangorestframework-csv - Provides CSV renderer support.</li> <li>djangorestframework-jsonapi - Provides a parser, renderer, serializers, and other tools to help build an API that is compliant with the jsonapi.org spec.</li> <li>drf_ujson2 - Implements JSON rendering using the UJSON package.</li> <li>rest-pandas - Pandas DataFrame-powered renderers including Excel, CSV, and SVG formats.</li> <li>djangorestframework-rapidjson - Provides rapidjson support with parser and renderer.</li> </ul>"},{"location":"community/third-party-packages/#filtering","title":"Filtering","text":"<ul> <li>djangorestframework-chain - Allows arbitrary chaining of both relations and lookup filters.</li> <li>django-url-filter - Allows a safe way to filter data via human-friendly URLs. It is a generic library which is not tied to DRF but it provides easy integration with DRF.</li> <li>drf-url-filter is a simple Django app to apply filters on drf <code>ModelViewSet</code>'s <code>Queryset</code> in a clean, simple and configurable way. It also supports validations on incoming query params and their values.</li> <li>django-rest-framework-guardian - Provides integration with django-guardian, including the <code>DjangoObjectPermissionsFilter</code> previously found in DRF.</li> </ul>"},{"location":"community/third-party-packages/#misc","title":"Misc","text":"<ul> <li>cookiecutter-django-rest - A cookiecutter template that takes care of the setup and configuration so you can focus on making your REST apis awesome.</li> <li>djangorestrelationalhyperlink - A hyperlinked serializer that can can be used to alter relationships via hyperlinks, but otherwise like a hyperlink model serializer.</li> <li>django-rest-framework-proxy - Proxy to redirect incoming request to another API server.</li> <li>gaiarestframework - Utils for django-rest-framework</li> <li>drf-extensions - A collection of custom extensions</li> <li>ember-django-adapter - An adapter for working with Ember.js</li> <li>django-versatileimagefield - Provides a drop-in replacement for Django's stock <code>ImageField</code> that makes it easy to serve images in multiple sizes/renditions from a single field. For DRF-specific implementation docs, click here.</li> <li>drf-tracking - Utilities to track requests to DRF API views.</li> <li>drf_tweaks - Serializers with one-step validation (and more), pagination without counts and other tweaks.</li> <li>django-rest-framework-braces - Collection of utilities for working with Django Rest Framework. The most notable ones are FormSerializer and SerializerForm, which are adapters between DRF serializers and Django forms.</li> <li>drf-haystack - Haystack search for Django Rest Framework</li> <li>django-rest-framework-version-transforms - Enables the use of delta transformations for versioning of DRF resource representations.</li> <li>django-rest-messaging, django-rest-messaging-centrifugo and django-rest-messaging-js - A real-time pluggable messaging service using DRM.</li> <li>djangorest-alchemy - SQLAlchemy support for REST framework.</li> <li>djangorestframework-datatables - Seamless integration between Django REST framework and Datatables.</li> <li>django-rest-framework-condition - Decorators for managing HTTP cache headers for Django REST framework (ETag and Last-modified).</li> <li>django-rest-witchcraft - Provides DRF integration with SQLAlchemy with SQLAlchemy model serializers/viewsets and a bunch of other goodies</li> <li>djangorestframework-mvt - An extension for creating views that serve Postgres data as Map Box Vector Tiles.</li> <li>drf-viewset-profiler - Lib\u00a0to\u00a0profile\u00a0all\u00a0methods\u00a0from\u00a0a\u00a0viewset\u00a0line\u00a0by\u00a0line.</li> <li>djangorestframework-features - Advanced schema generation and more based on named features.</li> <li>django-elasticsearch-dsl-drf - Integrate Elasticsearch DSL with Django REST framework. Package provides views, serializers, filter backends, pagination and other handy add-ons.</li> <li>django-api-client - DRF client that groups the Endpoint response, for use in CBVs and FBV as if you were working with Django's Native Models..</li> <li>fast-drf - A model based library for making API development faster and easier.</li> </ul>"},{"location":"tutorial/customize/","title":"Customize","text":"<p>Try to customize different behaviours or aspect of app.</p> <ol> <li>HTML templates</li> <li>Error page's with images</li> <li>Javascript Alert</li> <li>Google Tag Manager</li> </ol>"},{"location":"tutorial/example/","title":"Example","text":"<p>Create a simple App to allow admin users wrap Django errors.</p>"},{"location":"tutorial/example/#project-setup","title":"Project setup","text":"<p>Clone the Django project named <code>example</code></p> <pre><code># Clone the example's project repository\ngit clone --depth=50 --branch=django-iubenda https://github.com/DLRSP/example.git example-errors\ncd example-errors\n\n# Create a virtual environment to isolate our package dependencies locally\npython -m venv env\nsource env/bin/activate  # On Windows use `env\\Scripts\\activate`\n\n# Install Django and django-iubenda into the virtual environment\npip install -r requirements/py38-django32.txt\n\n# Now sync your database for the first time\npython manage.py migrate\n\n# Run the local server\npython manage.py runserver\n</code></pre>"},{"location":"tutorial/images/","title":"Images","text":"<p>If you like to add an image for your error's page, the suggested way is implementing your custom simple_tag.</p> <ol> <li> <p>Suppose to have your model <code>MyBackground</code> to store all your site background's image with a filer field called <code>image</code>.</p> example/models.py<pre><code>from django.db import models\nfrom filer.fields.image import FilerImageField\n\n\nclass MyBackground(models.Model):\n    name = models.CharField(verbose_name=\"Background\", max_length=50, null=True)\n    image = FilerImageField(null=True, blank=True, on_delete=models.CASCADE)\n</code></pre> </li> <li> <p>Upload your images with <code>name</code> like the error's code of the page to be able to dynamically load different images with same html file.</p> </li> <li> <p>Create your own template tags to store the image inside the context view where you want to load image</p> example/templatetags/errors.py<pre><code>from django import template\nfrom django.core.cache import cache\nfrom example.models import MyBackground\n\nregister = template.Library()\n\n\n@register.simple_tag(takes_context=True)\ndef load_error_img(context):\n    cache_key = f\"site_error_{context['error_code']}_context\"\n    try:\n        context_cache = cache.get(cache_key)\n    except Exception as err:\n        context_cache = None\n\n    if context_cache is None:\n        try:\n            custom_context = (\n                MyBackground.objects.values(\"image__file\")\n                .filter(name=context[\"error_code\"])\n                .first()\n            )\n            context_cache = cache.set(\n                cache_key, custom_context[\"image__file\"], timeout=86400\n            )\n            return custom_context[\"image__file\"]\n        except Exception as err:\n            print(err)\n\n    return context_cache or \"\"\n</code></pre> </li> <li> <p>Create your own html template inside the root of your app. Assign the result of your tag <code>load_error_img</code> into variable <code>error_img</code> and use it with <code>static</code> filter.</p> example/template/errors.html<pre><code>{% extends 'base.html' %}\n{% load static errors %}\n\n{% block content %}\n\n    {% load_error_img as error_img %}\n\n    &lt;div style=\"background-image: url( {% static error_img %} );\"&gt;\n        &lt;strong&gt;Oops! &lt;/strong&gt; {{ error_message }}\n    &lt;/div&gt;\n\n{% endblock content %}\n</code></pre> </li> <li> <p>(optional) It could be useful use the <code>MEDIA_URL</code> setting inside template. To do it, add the <code>context_processor</code>:</p> settings.py<pre><code>TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [os.path.join(PROJECT_DIR, \"templates\")],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",\n                \"django.contrib.messages.context_processors.messages\",\n                \"django.template.context_processors.media\",\n            ],\n        },\n    },\n]\n</code></pre> </li> <li> <p>(optional) And then use the <code>MEDIA_URL</code> tag inside template instead of <code>static</code> templatetags:</p> example/template/errors.html<pre><code>{% extends 'base.html' %}\n{% load static errors %}\n\n{% block content %}\n\n    {% load_error_img as error_img %}\n\n    &lt;div style=\"background-image: url( {{ MEDIA_URL }}{{ error_img }} );\"&gt;\n        &lt;strong&gt;Oops! &lt;/strong&gt; {{ error_message }}\n    &lt;/div&gt;\n\n{% endblock content %}\n...\n&lt;div style=\"background-image: url( {{ MEDIA_URL }}{{ error_img }} );\"&gt;\n   &lt;strong&gt;Oops! &lt;/strong&gt; {{ error_message }}\n&lt;/div&gt;\n...\n</code></pre> </li> </ol>"},{"location":"tutorial/templates/","title":"Templates","text":"<p>You can overwrite each page's template by create your own html file inside <code>example/templates/errors/404.html</code></p> <p>You can also overwrite one or all page's template by settings your own html file inside <code>settings</code></p> settings.py<pre><code># Custom Templates for all errors page inside the root's templates of my app\nTEMPLATE_ERROR_ALL = \"general_errors_page.html\"\n\n# Custom Templates for only 404 error's inside the root's templates of my app\nTEMPLATE_ERROR_404 = \"other_error_page.html\"\n\n# Custom Templates for only 405 error's inside the custom_app's templates\nTEMPLATE_ERROR_405 = \"custom_app/another_error_page.html\"\n</code></pre> <p>All available <code>settings</code> variables are: settings.py<pre><code>TEMPLATE_ERROR_ALL = \"errors/errors.html\"\nTEMPLATE_ERROR_400 = \"errors/400.html\"\nTEMPLATE_ERROR_403 = \"errors/403.html\"\nTEMPLATE_ERROR_404 = \"errors/404.html\"\nTEMPLATE_ERROR_405 = \"errors/405.html\"\nTEMPLATE_ERROR_500 = \"errors/500.html\"\n</code></pre></p> <p>The order to find template is:</p> <ol> <li>Custom template for specific error page (example: <code>settings.TEMPLATE_ERROR_404</code>)</li> <li>Custom template for all errors page (example: <code>settings.TEMPLATE_ERROR_ALL</code>)</li> <li>Custom template for specific error page by to overwrite default (example: <code>example/templates/errors/404.html</code>)</li> <li>Default template for specific error page</li> </ol>"}]}